# SwiftAE README

## About

SwiftAE provides client-side Apple event bindings for Apple's Swift language,
enabling it to control "AppleScriptable" OS X applications directly.

For example:

tell application "TextEdit" to get text of document 1

let result = try TextEdit().documents[1].text.get() as! String

SwiftAE is an in-progress effort to develop a first-class Apple event brige for
the Swift language, giving it application scripting capabilites, equal in
capability and compatibility to AppleScript's own. Its design descends from
appscript (http://appscript.sourceforge.net) and spinoff AppleEventBridge
(https://bitbucket.org/hhas/appleeventbridge/) projects, reworked into a
smaller simpler implementation, and adapted to integrate effectively with
Swift's static type system and syntax.

SwiftAE provides a number of base classes providing common functionality for
constructing object specifiers, converting between Swift and Apple event
data types, and packing, sending, and unpacking Apple events. These base
classes are tied together by generated glue modules. A default AEApplication
glue is included as standard, allowing Apple events to be constructed and
sent using raw four-char codes (OSTypes). Additional application-specific
glues can be generated using the included aeglue command-line tool, allowing
specifiers and commands to be written using the application's own
dictionary-defined terminology.

## Status

SwiftAE is alpha status: most of the implementation is sufficiently complete to
allow testing and experimentation.

A rough draft of the SwiftAE documentation (ported from AppleEventBridge) is
included. Expect errors, omissions, etc.

## Get it

To clone the SwiftAE Xcode project to your own machine:

git clone https://bitbucket.org/hhas/swiftae.git

The project's SwiftAE target is not yet configured to build an embeddable/
standalone framework. This will be addressed if/when the above blocking issue
is rectified, allowing the implementation to be completed and the project to
move to beta status. To run simple examples of use (see test/main.swift), build
and run the `test` target.

For convenience, glue files for TextEdit, Finder, and iTunes are included in the
project. Additional glues can be generated by building the `aeglue` target
and running the resulting `aeglue` command line tool in Terminal. For
example, to generate a SwiftAE glue and documentation for Photos.app:

/path/to/aeglue -o ~/Desktop Photos

A basic translation tool, SwiftAETranslate, that converts application commands
from AppleScript to Swift syntax is also included. To use it, build and run
the SwiftAETranslate target. Type an AppleScript command into the top text
pane and click the Run button to display the equivalent Swift syntax in the
bottom pane. If the 'Send Apple events' checkbox is selected, the command
will also be sent to the target application and its result displayed as
well. (Note that list/record results currently display as raw descriptors,
not formatted Swift code, due to the Sequence unpacking issues above. Atomic
results - boolean/number/string/specifier/etc - should display in correct Swift
syntax, caveat any bugs.)

Note that `aeglue` and SwiftAETranslate normally retrieve application
terminology using `ascrgdte` ('get dynamic terminology') events. Some
applications (e.g. Finder) have faulty `ascrgdte` handlers that fail to
return correct terminology, in which case use the `-o` or 'Use SDEF
terminology' options instead. (Be aware that SDEF-based terminology may also
contain bugs and omissions, in which case use raw four-char codes or correct
generated glue code by hand.)

SwiftAE requires OS X 10.11 and Swift 3.0 and Xcode 8.0 or later.


## Etc.

No warranty given, E&OE, use at own risk, etc.

